#+TITLE: vdem-codes
#+STARTUP: content

We are often faced with the problem of merging data from sources that use different naming conventions for countries and do not have any other underlying identifier that would facilitate the merge. We have developed a rudimentary tool to deal with this problem that relies on a central master CSV file containing pairs of V-Dem codes and country names. The tool contains code for both R and Stata to take an arbitrary input list of country names and return the corresponding codes.

* Differences Between R and Stata Functions
The R function is more robust, more flexible, and marginally faster than its Stata counterpart. First, the user can specify a different input CSV file if a particular project needs one that differs from the master in any way. Second, the function allows the user to specify the name of the country variable in the data (e.g. "Country" vs. "country" vs. "Country Name" etc.). Third, the function will not complete if any country names in the input are not found in the CSV file. It will instead return those names so that they can be added to the master file. Fourth, any changes saved to the master CSV file are immediately available for use by the function without any additional actions. Finally, the R function allows the user to specify a custom set of matches if desired. This can be supplied either as a =data.frame= with columns =source= and =destination= or as a named vector in the format ~c("origin" = "destination")~.

The Stata .do file is more rudimentary. First, the variable containing country names in the data must be "country". Second, country names that do not appear in the CSV will appear as missing in Stata. Third, and most importantly, changes made to the CSV are not immediately available in the .do file. The tool contains additional code to update the .do file if the master CSV changes, but it requires the user to take additional action (and the user must have both R and GNU Make installed on their machine).

The python function mimics the R function in that it allows the user to specify a country name column, a path to the country-code csv file and issues a warning on missing country names. It has been written to work on a pandas dataframe, but it has not been tested extensively.

* terr_code_assignment.py
I consider this to be the future of this function. It adds additional flexibility, reduces the need for near-duplicates in variations of country names, and includes the ability to perform a "dry-run" to check matches. 


** Prerequisites
This code assumes you have a working installation of Python and the pandas package installed. It has only been tested using Python 3.7, but it should work with any 3.x version. 

The script should have been made executable, but if that got lost in copying you'll have to redo that. If you plan to run this as an executable file, then you should double-check the shebang line to make sure it matches your python installation.

The Pandas package uses =xlrd= to import and =openpyxl= to export excel files, so you may need to install those separately.

*** Using the Script
This function has been written with the thought that it will be used twice in a three-step process. The first step does a dry run and produces a file that can be checked for problems.  The second step then actually processes the file. 

**** The function

#+BEGIN_SRC bash :eval never
terr_code_assignment.py [-h] --file-path FILE_PATH --territory-column
                        TERRITORY_COLUMN --territory-code-file
                        TERRITORY_CODE_FILE
                        [--territory-id-column TERRITORY_ID_COLUMN]
                        [--custom-matches CUSTOM_MATCHES] --dry-run
                        DRY_RUN [--dry-run-out DRY_RUN_OUT]
#+END_SRC

Its arguments are:
- =--file-path=: the path to the file you want to use. It can be either a csv or an xlsx file.
- =--territory-column=: the name of the column in the data that contains the territory name to be coded. Column names with spaces or weird characters can be placed in back-ticks.
- =--territory-code-file=: the path to the master territory code file (=territory_list.csv=)
- =--territory-id-column=: the name for the new territory code variable. Defaults to =territory_id= and is not required
- =--custom-matches=: currently not used
- =--dry-run=: a boolean flag indicating if this is a dry-run or not
- =--dry-run-out=: the path to where you want to write the dry-run file. Can be either a csv or an xlsx file.
 
**** Workflow
I imagine that the workflow for using this proceeds as follows. I'm going to assume you are already in the directory that contains the data you want to work on and that you have created the alias =terr_code= for calling the script.

***** Step 1: Dry-run
First, we want to see what is going to match up:

#+BEGIN_SRC bash :eval never
terr_code --file-path=my_data.xlsx \\
          --territory-column=country \\
          --territory-code-file=territory_list.csv \\
          --dry-run=True \\
          --dry-run-out=test_matches.xlsx
#+END_SRC

This will produce an excel file with unique territory (country) names from the "my_data.xlsx" file, the cleaned up version of that name, and the corresponding territory code (if it exists).

***** Step 2: Examine and fix
This is the time consuming step. Here you'll have to go through the list and make sure that everything that's been matched and make decisions about whether or not it's correct. For correct matches, nothing needs to be done. For incorrect matches, you'll have to make changes to the input file. For non-matches, you can either make changes to the input file or the territory list file, depending on what's required. If it's a truly new territory, then the only solution is to add a new territory/code pair to the territory list file. If it's an alternative spelling/name, then you have an option about which file to edit. I would recommend editing the territory list file in this case only if you are certain that doing so won't create problems in the future with other territory names. 

***** Step 3: The "real" run
Finally, we rerun =terr_code= and have it write the codes to the original data file.

#+BEGIN_SRC bash :eval never
terr_code --file-path=my_data.xlsx \\
          --territory-column=country \\
          --territory-code-file=territory_list.csv \\
          --territory-id-column=territory_id \\
          --dry-run=False
#+END_SRC

This will assign the codes and write the file back to the file path you specified with =--file-path=

*** Known pitfalls
- During the real assignment of codes, there is no warning if a name doesn't match so it is possible to still end up with blank territory codes.
- It will be really important 
- The =custom_matches= option is not currently setup to work 
- I've done some error checking here, but I have not thoroughly tested this, so it's possible that it will throw unhelpful python errors instead of doing something more informative
- Similarly, this does some error checking on inputs, but there are probably some ways to make it break that I haven't thought of
- If you are migrating from the vcode function, then be aware that this will run even with missing country names, though it should warn in that case

* Additional Included Tools
** Makefile
The project makefile is intended to be run whenever the CSV file is updated. Doing so will update the stata function to match the changes. It also re-sorts the CSV to avoid any duplication. Any entirely new codes are detected and added to a separate file that attaches a single name to each code. The hope is the makefile facilitates keeping everything up to date while avoiding any duplication. However, its conclusion may limit users to those who have GNU make installed on their system.

** Reverse Coding
For times when country names are preferred over codes (e.g. for visual inspection of data or graphics creation), the R function country_from_vcode() will convert V-Dem codes to a single country name. Like the primary function, it will return an error if an unknown code is passed to it. Similarly, the user can specify a path to a custom list of code-name pairs. The list included in the package is constructed by default of the alphabetically first name for each code. While this is often sufficient for preliminary work, this default may not be appropriate for publication settings. This function has not yet been translated to Stata or Python.

* Future Extensions/Improvements
The master CSV file needs to live in a shared place where any changes or additions are available to all users. This will avoid conflicts when new codes are added and prevent duplication of efforts when new country spellings are encountered.

One potential improvement would be to automate updates to the .do file when the CSV file is updated (or at least make it easier for users to do so without too many dependencies or technical knowledge). One suggestion that's been floated here is to host the repo on a different git service that allows the use of hooks to automatically trigger the makefile whenever a new commit is pushed.

A second potential improvement is to expand the tool dramatically to deal with problems related to country changes over time. The complexities introduced by this change would not be trivial and much more discussion is necessary.

Moving forward, this project is going to focus on R code development. This will have the advantage of both simplifying a lot of the process (e.g. we can deal with case etc pragmatically) and increasing opportunities for error handling.

An eye toward the future is important to create a flexible system that might grow to include sub-national units and additional information (e.g. continent, date-related information). 


* Project  To Do List
** DONE Organize CSV by code
CLOSED: [2018-02-05 Mon 14:21]
** DONE Check for duplicates
CLOSED: [2018-02-05 Mon 14:21]
** DONE Create a corresponding Stata .do file
CLOSED: [2018-02-05 Mon 14:21]
** Create a script that can be run by (essentially) anybody to update the Stata file on demand whenever the CSV file is updated
Currently this is a makefile that relies on R; not sure if there is a more universal solution; maybe? but if this stays on git, then we can probably assume sufficient knowledge to use
** DONE Fix the way that R shows country names not found in the file
CLOSED: [2018-02-05 Mon 14:22]
** DONE Add script to always keep CSV organized by code (and then by alpha)
CLOSED: [2018-02-05 Mon 14:22]
** DONE Reverse function to assign names based on codes
CLOSED: [2018-02-05 Mon 14:22]
** DONE Create a python version of the function
CLOSED: [2018-02-05 Mon 14:22]
** DONE Fix how R handles NA or "" country names
CLOSED: [2018-02-05 Mon 14:23]
** DONE Make the path to the vcodes file more generalizable
CLOSED: [2018-07-05 Thu 13:49]
:LOGBOOK:
CLOCK: [2018-07-05 Thu 13:47]--[2018-07-05 Thu 13:49] =>  0:02
:END:
** DONE Allow user-specified country-code pairs in R
CLOSED: [2018-11-20 Tue 17:25]
:LOGBOOK:
CLOCK: [2018-07-05 Thu 13:50]--[2018-07-05 Thu 14:10] =>  0:20
:END:
** TODO Allow user-specified country-code pairs in Python
** TODO Add a function to take a list of country names and return a list of country codes
This would be useful for generating one-off vectors to use elsewhere
** TODO Translate country_from_vcode to python
** TODO automate the updating process
** TODO Test length of country not found warning and add "and more" or similar if it exceeds print output limits
* Potential Future Problems
** Island nations
There are a lot of island nations that have plural names (e.g. St. Vincent and the Grenadines). We will need to think about ways to deal with data that might be labeled just as St. Vincent but may refer to all of the islands.
